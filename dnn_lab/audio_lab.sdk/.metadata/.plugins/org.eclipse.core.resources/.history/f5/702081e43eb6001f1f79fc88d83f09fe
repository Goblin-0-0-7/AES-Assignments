/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xil_io.h"
#include "xiicps.h"
#include "timer_ps.h"
#include <time.h>
#include <stdlib.h>
#include <math.h>
#include <arm_neon.h>
/* I2S Register offsets */
#define I2S_RESET_REG 		0x00
#define I2S_CTRL_REG 		0x04
#define I2S_CLK_CTRL_REG 	0x08
#define I2S_FIFO_STS_REG 	0x20
#define I2S_RX_FIFO_REG 	0x28
#define I2S_TX_FIFO_REG 	0x2C

#define FIFO_ISR ( 0x00)
#define FIFO_IER ( 0x04)
#define FIFO_TDFV ( 0x0C)
#define FIFO_RDFO ( 0x1C)
#define FIFO_TDR ( 0x2C)
#define FIFO_TDFD ( 0x10)
#define FIFO_TLR ( 0x14)


#define FIFO_RLR ( 0x24)
#define FIFO_RDFD ( 0x20)
#define FIFO_RDR ( 0x30)

/* IIC address of the SSM2603 device and the desired IIC clock speed */
#define IIC_SLAVE_ADDR		0b0011010
#define IIC_SCLK_RATE		100000


#define AUDIO_IIC_ID XPAR_XIICPS_0_DEVICE_ID
#define AUDIO_CTRL_BASEADDR XPAR_AXI_I2S_ADI_0_S00_AXI_BASEADDR
#define SCU_TIMER_ID XPAR_SCUTIMER_DEVICE_ID


#define SWI_BASE_ADDR XPAR_AXI_GPIO_2_BASEADDR
#define LED_BASE_ADDR XPAR_AXI_GPIO_1_BASEADDR
#define BUT_BASE_ADDR XPAR_AXI_GPIO_0_BASEADDR

#define AUDIO_FIFO XPAR_AXI_FIFO_MM_S_0_BASEADDR

#define FIR_FIFO XPAR_AXI_FIFO_MM_S_1_BASEADDR

#define FIR_FIFO_CONFIG XPAR_AXI_FIFO_MM_S_2_BASEADDR

#define GLOBAL_TMR_BASEADDR XPAR_PS7_GLOBALTIMER_0_S_AXI_BASEADDR
/* ------------------------------------------------------------ */
/*				Low-Pass and High-Pass FIR filter coefficients									*/
/* ------------------------------------------------------------ */

#define FILTER_TAP_NUM 99

static double filter_taps[FILTER_TAP_NUM] = {0.009070325134076762,0.010925139635915718,0.014865100117983266,0.017271841382238834,0.017110345805612836,0.013841935730177184,0.00768287542394269,-0.00033570096284880283,-0.00855651230212637,-0.015115420596300298,-0.018474581597192972,-0.01790242926323334,-0.013759770086619688,-0.00744663575478999,-0.0010100562754879574,0.003463916991779191,0.004531288056068554,0.0018722717349563603,-0.0035542663695052566,-0.009796657613985139,-0.014541849551298591,-0.015915628163664194,-0.013167404246309791,-0.007005763514976244,0.0005611702074044075,0.00686695102099133,0.009502563201542347,0.007217454026646569,0.00047005901783785017,-0.008583405252049323,-0.01671855705381644,-0.020713194107472837,-0.01853134409823149,-0.010201862058174558,0.001954856182055768,0.013879813474819404,0.021015679003174942,0.019872032786541934,0.009429442882055768,-0.008098291693112642,-0.027486975958639432,-0.04171078091904579,-0.04389496506780281,-0.029371072656094826,0.0025996976326444813,0.04822047963918811,0.09968235289644688,0.14692306063041927,0.1800952027638827,0.19202814998085552,0.1800952027638827,0.14692306063041927,0.09968235289644688,0.04822047963918811,0.0025996976326444813,-0.029371072656094826,-0.04389496506780281,-0.04171078091904579,-0.027486975958639432,-0.008098291693112642,0.009429442882055768,0.019872032786541934,0.021015679003174942,0.013879813474819404,0.001954856182055768,-0.010201862058174558,-0.01853134409823149,-0.020713194107472837,-0.01671855705381644,-0.008583405252049323,0.00047005901783785017,0.007217454026646569,0.009502563201542347,0.00686695102099133,0.0005611702074044075,-0.007005763514976244,-0.013167404246309791,-0.015915628163664194,-0.014541849551298591,-0.009796657613985139,-0.0035542663695052566,0.0018722717349563603,0.004531288056068554,0.003463916991779191,-0.0010100562754879574,-0.00744663575478999,-0.013759770086619688,-0.01790242926323334,-0.018474581597192972,-0.015115420596300298,-0.00855651230212637,-0.00033570096284880283,0.00768287542394269,0.013841935730177184,0.017110345805612836,0.017271841382238834,0.014865100117983266,0.010925139635915718,0.009070325134076762};

/* ------------------------------------------------------------ */
/*				Global Variables								*/
/* ------------------------------------------------------------ */

XIicPs Iic;		/* Instance of the IIC Device */

/* ------------------------------------------------------------ */
/*				Procedure Definitions							*/
/* ------------------------------------------------------------ */

int AudioRegSet(XIicPs *IIcPtr, u8 regAddr, u16 regData)
{
	int Status;
	u8 SendBuffer[2];

	SendBuffer[0] = regAddr << 1;
	SendBuffer[0] = SendBuffer[0] | ((regData >> 8) & 0b1);

	SendBuffer[1] = regData & 0xFF;

	Status = XIicPs_MasterSendPolled(IIcPtr, SendBuffer,
				 2, IIC_SLAVE_ADDR);
	if (Status != XST_SUCCESS) {
		xil_printf("IIC send failed\n\r");
		return XST_FAILURE;
	}
	/*
	 * Wait until bus is idle to start another transfer.
	 */
	while (XIicPs_BusIsBusy(IIcPtr)) {
		/* NOP */
	}
	return XST_SUCCESS;

}
/***	AudioInitialize(u16 timerID,  u16 iicID, u32 i2sAddr)
**
**	Parameters:
**		timerID - DEVICE_ID for the SCU timer
**		iicID 	- DEVICE_ID for the PS IIC controller connected to the SSM2603
**		i2sAddr - Physical Base address of the I2S controller
**
**	Return Value: int
**		XST_SUCCESS if successful
**
**	Errors:
**
**	Description:
**		Initializes the Audio demo. Must be called once and only once before calling
**		AudioRunDemo
**
*/
int AudioInitialize(u16 timerID,  u16 iicID, u32 i2sAddr) //, u32 i2sTransmAddr, u32 i2sReceivAddr)
{
	int Status;
	XIicPs_Config *Config;
	u32 i2sClkDiv;

	TimerInitialize(timerID);

	/*
	 * Initialize the IIC driver so that it's ready to use
	 * Look up the configuration in the config table,
	 * then initialize it.
	 */
	Config = XIicPs_LookupConfig(iicID);
	if (NULL == Config) {
		return XST_FAILURE;
	}

	Status = XIicPs_CfgInitialize(&Iic, Config, Config->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Perform a self-test to ensure that the hardware was built correctly.
	 */
	Status = XIicPs_SelfTest(&Iic);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Set the IIC serial clock rate.
	 */
	Status = XIicPs_SetSClk(&Iic, IIC_SCLK_RATE);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}


	/*
	 * Write to the SSM2603 audio codec registers to configure the device. Refer to the
	 * SSM2603 Audio Codec data sheet for information on what these writes do.
	 */
	Status = AudioRegSet(&Iic, 15, 0b000000000); //Perform Reset
	TimerDelay(75000);
	Status |= AudioRegSet(&Iic, 6, 0b000110000); //Power up
	Status |= AudioRegSet(&Iic, 0, 0b000010111);
	Status |= AudioRegSet(&Iic, 1, 0b000010111);
	Status |= AudioRegSet(&Iic, 2, 0b101111001);
	Status |= AudioRegSet(&Iic, 4, 0b000010000);
	Status |= AudioRegSet(&Iic, 5, 0b000000000);
	Status |= AudioRegSet(&Iic, 7, 0b000001010); //Changed so Word length is 24
	Status |= AudioRegSet(&Iic, 8, 0b000000000); //Changed so no CLKDIV2
	TimerDelay(75000);
	Status |= AudioRegSet(&Iic, 9, 0b000000001);
	Status |= AudioRegSet(&Iic, 6, 0b000100000);
	Status = AudioRegSet(&Iic, 4, 0b000010000);

	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	i2sClkDiv = 1; //Set the BCLK to be MCLK / 4
	i2sClkDiv = i2sClkDiv | (31 << 16); //Set the LRCLK's to be BCLK / 64

	Xil_Out32(i2sAddr + I2S_CLK_CTRL_REG, i2sClkDiv); //Write clock div register

	Xil_Out32(AUDIO_CTRL_BASEADDR + I2S_RESET_REG, 0b110); //Reset RX and TX FIFOs
	Xil_Out32(AUDIO_CTRL_BASEADDR + I2S_CTRL_REG, 0b011); //Enable RX Fifo and TX FIFOs, disable mute
	return XST_SUCCESS;
}

void I2SFifoWrite (u32 i2sBaseAddr, u32 audioData)
{

	Xil_Out32(i2sBaseAddr + 0x10, audioData); // write DATA
    Xil_Out32(i2sBaseAddr + 0x14, 4);    // write the length of the DATA (4 bytes)

	while ((Xil_In32(i2sBaseAddr + FIFO_ISR)&0x08000000)!=0x08000000){;}  // waits for the transmission completes
	Xil_Out32(i2sBaseAddr + FIFO_ISR, 0x08000000);  // ack the transmission complete


}

u32 I2SFifoRead (u32 i2sBaseAddr)
{

	while (Xil_In32(i2sBaseAddr + FIFO_RDFO)==0){;} // waits for a sample in the FIFO
	int data = Xil_In32(i2sBaseAddr + FIFO_RDFD);   // read the sample from the FIFO
return data;

}

void FifoWrite (u32 fifoBaseAddr, u32 data)
{

	Xil_Out32(fifoBaseAddr + 0x10, data); // write DATA
    Xil_Out32(fifoBaseAddr + 0x14, 4);    // write the length of the DATA (4 bytes)

	while ((Xil_In32(fifoBaseAddr + FIFO_ISR)&0x08000000)!=0x08000000){;}  // waits for the transmission completes
	Xil_Out32(fifoBaseAddr + FIFO_ISR, 0x08000000);  // ack the transmission complete


}

u32 FifoRead (u32 fifoBaseAddr)
{

	while (Xil_In32(fifoBaseAddr + FIFO_RDFO)==0){;} // waits for a sample in the FIFO
	int data = Xil_In32(fifoBaseAddr + FIFO_RDFD);   // read the sample from the FIFO
return data;

}

int main()
{
    init_platform();

    print("Started!\n\r");


    int bufferL[FILTER_TAP_NUM];
    int bufferR[FILTER_TAP_NUM];


    int sampleL, sampleR;
    int outputL, outputR;
    int filteredL ;
    int filteredR;
	AudioInitialize(SCU_TIMER_ID, AUDIO_IIC_ID, AUDIO_CTRL_BASEADDR);

	/* Initialize Accelerator */


    while (1){

		sampleL = FifoRead(AUDIO_FIFO);
		sampleR = FifoRead(AUDIO_FIFO);

		FifoWrite(FIR_FIFO, sampleL);
		FifoWrite(FIR_FIFO, sampleR);

		outputL = FifoRead(FIR_FIFO);
		outputR = FifoRead(FIR_FIFO);


		FifoWrite(AUDIO_FIFO, sampleL);
		FifoWrite(AUDIO_FIFO, sampleR);
    }

		cleanup_platform();
    return 0;
}
