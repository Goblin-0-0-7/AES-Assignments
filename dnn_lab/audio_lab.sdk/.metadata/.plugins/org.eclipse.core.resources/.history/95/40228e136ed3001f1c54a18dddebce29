#include <stdio.h>
#include <stdlib.h>
#include "platform.h"
#include "xil_printf.h"
#include "xuartps.h"
#include "weights.h"
#include "test_images.h"
#include <xtime_l.h>
#include <time.h>

#include <math.h>

#define n_bias0 64
#define n_weights0 50176
#define n_bias1 32
#define n_weights1 2048
#define n_bias2 10
#define n_weights2 320

typedef short int DATA;


DATA gemm0_bias[n_bias0] = {bias0};
DATA gemm0_weights[n_weights0] = {weights0} ;
DATA gemm1_bias[n_bias1] = {bias1};
DATA gemm1_weights[n_weights1] = {weights1};
DATA gemm2_bias[n_bias2] = {bias2};
DATA gemm2_weights[n_weights2] = {weights2};

#define FIXED2FLOAT(a, qf) (((float) (a)) / (1<<qf))
#define FLOAT2FIXED(a, qf) ((short int) round((a) * (1<<qf)))

#define _MAX_ (1 << (sizeof(DATA)*8-1))-1
#define _MIN_ -(_MAX_+1)

// DNN functions to compose your network

void FC_forward(DATA* input, DATA* output, int in_s, int out_s, DATA* weights, DATA* bias, int qf) ;
static inline long long int saturate(long long int mac);
static inline void relu_forward(DATA* input, DATA* output, int size);
int resultsProcessing(DATA* results, int size);

// implement your function receiving from UART
DATA readDATAfromUART(){ // reads a sequence of bytes and composes the DATA
	unsigned char in1, in2;
	DATA out;
	in1 = XUartPs_RecvByte(STDIN_BASEADDRESS);
	in2 = XUartPs_RecvByte(STDIN_BASEADDRESS);
	out = (in2 << 8) | in1;
	//xil_printf("Read %d\r\n", out);
	return out;
}

DATA test_images[10][28*28] = {{imm_test_0},{imm_test_1},{imm_test_2},{imm_test_3},{imm_test_4},{imm_test_5},{imm_test_6},{imm_test_7},{imm_test_8},{imm_test_9}};

DATA output_gemm0[64] = {0};
DATA  input_gemm1[64] = {0};
DATA output_gemm1[32] = {0};
DATA  input_gemm2[32] = {0};
DATA output_gemm2[10] = {0};

// Structure holding weights and bias for one layer
typedef struct{
		int neurons; // weights_num = previous neurons * neurons, bias_num = neurons
		DATA weights[];
		DATA bias[];
} layer;

/* Structure of the basic test DNN */
int test_image_size = 784;
layer test_layer0 = {64, &weights_0, &bias_0};
layer test_layer1 = {32, &weights_1, &bias_1};
layer test_layer2 = {10, &weights_2, &bias_2};

int main(){
	init_platform();

	//UART setup
	XUartPs Uart_1_PS;
	u16 DeviceId_1= XPAR_PS7_UART_1_DEVICE_ID;
	int Status_1;
	XUartPs_Config *Config_1;
	Config_1 = XUartPs_LookupConfig(DeviceId_1);
	if (NULL == Config_1) {
	return XST_FAILURE;
	}
	/*the default configuration is stored in Config and it can be used to initialize the controller */
	Status_1 = XUartPs_CfgInitialize(&Uart_1_PS, Config_1, Config_1->BaseAddress);
	if (Status_1 != XST_SUCCESS) {
	return XST_FAILURE;
	}
	// Set the BAUD rate
	u32 BaudRate = (u32)115200;
	Status_1 = XUartPs_SetBaudRate(&Uart_1_PS, BaudRate);
	if (Status_1 != (s32)XST_SUCCESS) {
	return XST_FAILURE;
	}
	//END UART SETUP
	xil_printf ("Started\r\n");

	int result = -1;
	int test_true = 0;
	int test_false = 0;
	for (int i=0; i<=9; i++){
		result = processImage(&test_images[i]);
		if (result == i) {
			xil_printf("Test image %d correctly identified as %d\r\n", i, result);
			test_true += 1;
		}
		else {
			xil_printf("Test image %d incorrect identified as %d\r\n", i, result);
			test_false += 1;
		}
	}

	xil_printf("%d/%d test images correctly identified\r\n", test_true, (test_true + test_false));

	/* --- DNN setup --- */
	int bias0_num = 64;
	int bias1_num = 32;
	int bias2_num = 10;
	int weights0_num = 50176;
	int weights_1_num = 2048;
	int weights2_num = 320;

	layer layers[3] = malloc(sizeof(layer) * 3 + sizeof(DATA) * (64+32+10+50176+2048+320));

	// get layer 0
	layers[0].neurons = 64;
	xil_printf("Send bias for layer 0\r\n");
	readBias(layers[0].bias, 64);

	// -> get size of image
	int image_size = 784;
	DATA image[28*28] = {0};
	while (1){
		xil_printf("Waiting for the image...\r\n");
		readImage(&image, image_size);
		result = processImage(&image);
		xil_printf("Image shows the number %d\r\n", result);
	}


    cleanup_platform();
    return 0;
}

void readBias(DATA * pBias, int len){
	for(int i = 0; i < len; i++){
		pBias[i] = readDATAfromUART();
	}
}

void readImage(DATA * image, int size){
	for(int i = 0; i < size; i++){
		//xil_printf("Reading DATA %d\r\n", i);
		image[i] = readDATAfromUART();
	}
}

int processImage(DATA * image) {

	FC_forward(image, output_gemm0, 784, 64, gemm0_weights, gemm0_bias, 8);
	relu_forward(output_gemm0, input_gemm1, 64);
	FC_forward(input_gemm1, output_gemm1, 64, 32, gemm1_weights, gemm1_bias, 8);
	relu_forward(output_gemm1, input_gemm2, 32);
	FC_forward(input_gemm2, output_gemm2, 32, 10, gemm2_weights, gemm2_bias, 8);
	return resultsProcessing(output_gemm2, 10);
}

// TODO: what is qf?
void FC_forward(DATA* input, DATA* output, int in_s, int out_s, DATA* weights, DATA* bias, int qf) {
	// NOTE return W * x
	int hkern = 0;
	int wkern = 0;
	long long int mac = 0;
	DATA current = 0;

	/* foreach row in kernel */
//	#pragma omp parallel for private (hkern, wkern, mac, current)
	for (hkern = 0; hkern < out_s; hkern++) {
		mac = ((long long int)bias[hkern]) << qf;
		for (wkern = 0; wkern < in_s; wkern++) {
			current = input[wkern];
			mac += current * weights[hkern*in_s + wkern];
		}
		output[hkern] = (DATA)(mac >> qf);
	}
}

static inline long long int saturate(long long int mac)
{

	if(mac > _MAX_) {
		printf("[WARNING] Saturation.mac: %lld -> %llx _MAX_: %d  _MIN_: %d  res: %d\n",  mac, mac, _MAX_, _MIN_, _MAX_);
		return _MAX_;
	}

	if(mac < _MIN_){
		printf( "[WARNING] Saturation. mac: %lld -> %llx _MAX_: %d  _MIN_: %d  res: %d\n",  mac, mac, _MAX_, _MIN_, _MIN_);
		return _MIN_;
	}

	//printf("mac: %lld -> %llx _MAX_: %lld  _MIN_: %lld  res: %lld\n", mac, mac, _MAX_, _MIN_, mac);
    return mac;

}

static inline void relu_forward(DATA* input, DATA* output, int size) {
	int i = 0;
	for(i = 0; i < size; i++) {
		DATA v = input[i];
		v = v > 0 ? v : 0;
		output[i] = v;
	}
}

#define SIZEWA 10
int resultsProcessing(DATA* results, int size){
//What do you want to do with the results of the CNN? Here is the place where you should put the classifier or the detection (see YOLO detection for example)
//The simplest classifier is a maximum search for the results which returns the index value of the maximum

 char *labels[10]={"digit 0", "digit 1", "digit 2", "digit 3", "digit 4", "digit 5", "digit 6", "digit 7", "digit 8", "digit 9"};

// TODO: check the size parameter
  int size_wa = SIZEWA;
  float  r[SIZEWA];
  int  c[SIZEWA];
  float results_float[SIZEWA];
  float sum=0.0;
  DATA max=0;
  int max_i;
  for (int i =0;i<size_wa;i++){
      results_float[i] = FIXED2FLOAT(results[i],8);
    int n;
    if (results[i]>0)
      n=results[i];
    else
      n=-results[i];
    if (n>max){
      max=n;
      max_i=i;
    }
  }
  for (int i =0;i<size_wa;i++)
    sum+=exp(results_float[i]);

  for (int i =0;i<size_wa;i++){
    r[i]=exp(results_float[i]) / sum;
    c[i]=i;
  }
  for (int i =0;i<size_wa;i++){
    for (int j =i;j<size_wa;j++){
      if (r[j]>r[i]){
        float t= r[j];
        r[j]=r[i];
        r[i]=t;
        int tc= c[j];
        c[j]=c[i];
        c[i]=tc;
      }
    }
  }
  int top0=0;
  float topval=results_float[0];
  for (int i =1;i<size_wa;i++){
    if (results_float[i]>topval){
      top0=i;
      topval=results_float[i];
    }
  }
  //xil_printf("\n\n");
  //for (int i =0;i<5;i++){
//	  xil_printf("            TOP %d: [%d] %s   \n",i, c[i], labels[c[i]]);
  //}
  //xil_printf("max= %x \n",top0);
  return top0;
}
